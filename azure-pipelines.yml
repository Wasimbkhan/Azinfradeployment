# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
    - stage: Script
      displayName: "Welcome msg"
      jobs:
        - job: Welcome_msg
          steps:
            - script: echo My Azure infra deployment pipeline
              displayName: 'Run a one-line script'

    - stage: Download_secure_file
      displayName: "Download_secure_file"
      jobs:
        - job: Download_secure_file
          steps:
            - task: DownloadSecureFile@1
              name: publickey
              inputs:
                secureFile: 'azadm_rsa.pub'

    - stage: Terraform_Version
      displayName: "Terraform Version Check"
      jobs:
        - job: CheckVersion
          steps:
            - task: TerraformCLI@2
              name: version
              inputs:
                command: 'version'
                allowTelemetryCollection: true


    - stage: Terraform_Init
      displayName: "Terraform Init"
      jobs:
        - job: InitTerraform
          steps:
            - task: TerraformCLI@2
              name: Init
              inputs:
                command: 'init'
                #commandOptions: '-var appid=$(appid) -var password=$(password) -var sshkey=(publickey.secureFilePath)'
                backendType: 'azurerm'
                backendServiceArm: 'Pay-As-You-Go(51f12368-372d-48c6-8e3c-02c940c4a791)'
                ensureBackend: true
                backendAzureRmResourceGroupName: 'rgtfstatebackend'
                backendAzureRmResourceGroupLocation: 'East US'
                backendAzureRmStorageAccountName: 'mybackendsg1'
                backendAzureRmContainerName: 'mybackendsgcontainer1'
                backendAzureRmKey: 'backend_terraform.tfstate'
                allowTelemetryCollection: true
                
            # Save the .terraform directory and terraform.lock file
            # - task: PublishPipelineArtifact@1
            #   displayName: "Save Terraform Lock File"
            #   inputs:
            #     targetPath: "$(Build.SourcesDirectory)/.terraform"
            #     artifact: "terraform_state"
            
            # - task: PublishPipelineArtifact@1
            #   displayName: "Save Terraform Lock File"
            #   inputs:
            #     targetPath: "$(Build.SourcesDirectory)/terraform.lock.hcl"
            #     artifact: "terraform_lock"


    - stage: Terraform_Plan
      displayName: "Terraform Plan"
      dependsOn: Terraform_Init
      condition: succeeded()
      jobs:
        - job: PlanTerraform
          steps:
          
              # Restore the .terraform directory from the artifact
          # - task: DownloadPipelineArtifact@2
          #   inputs:
          #     artifact: "terraform_state"
          #     path: "$(Build.SourcesDirectory)/.terraform"

          - task: TerraformCLI@2
            name: Plan
            inputs:
              command: 'plan'
              environmentServiceName: 'Pay-As-You-Go(51f12368-372d-48c6-8e3c-02c940c4a791)'
              commandOptions: '-var appid=$(appid) -var password=$(password) -var sshkey=(publickey.secureFilePath)'
              allowTelemetryCollection: true

          - task: PublishPipelineArtifact@1
            displayName: "Save Terraform Plan"
            inputs:
              targetPath: "tfplan"
              artifact: "terraform_plan"

    - stage: Terraform_Apply
      displayName: "Terraform Apply"
      dependsOn: Terraform_Plan
      condition: succeeded()  # Runs only if the plan stage succeeds
      jobs:
        - deployment: ApplyTerraform
          environment: "Production"  # Approval applies only to this stage
          strategy:
              runOnce:
                deploy:
                  steps:
                    - task: DownloadPipelineArtifact@2
                      displayName: "Download Terraform Plan"
                      inputs:
                        artifact: "terraform_plan"
                        path: "$(Build.SourcesDirectory)"

                    - task: TerraformCLI@2
                      name: apply
                      inputs:
                        command: 'apply'
                        environmentServiceName: 'Pay-As-You-Go(51f12368-372d-48c6-8e3c-02c940c4a791)'
                        commandOptions: '-var appid=$(appid) -var password=$(password) -var sshkey=(publickey.secureFilePath) -var tfplan=$(tfplan)
                        allowTelemetryCollection: true

    # - stage: Terraform_Destroy
    #   displayName: "Terraform Destroy"
    #   dependsOn: Terraform_Apply
    #   condition: always()  # Ensures destroy runs regardless of success/failure
    #   jobs:
    #     - job: DestroyTerraform
    #       steps:
    #         - task: TerraformCLI@2
    #           name: Destroy
    #           inputs:
    #             command: 'destroy'
    #             environmentServiceName: 'Pay-As-You-Go(51f12368-372d-48c6-8e3c-02c940c4a791)'
    #             commandOptions: '-var appid=$(appid) -var password=$(password) -var sshkey=(publickey.secureFilePath)'
    #             allowTelemetryCollection: true

    - stage: complete_msg
      displayName: "Run a multi-line script"
      dependsOn: Terraform_Apply
      jobs:
        - job: Complete_msg
          steps:
            - script: |
                echo Add other tasks to build, test, and deploy your project.
                echo See https://aka.ms/yaml
              displayName: 'Run a multi-line script'

